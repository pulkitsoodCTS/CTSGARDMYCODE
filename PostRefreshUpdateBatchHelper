public class PostRefreshUpdateBatchHelper{
    //Process-Helper Methods START
    public static void maskAccountEmails(List<Account> inputAccounts,UtilityData utilData){
        List<Account> modifiedAccounts = new List<Account>();
        for(Account inputAccount : inputAccounts){
                        
            if(!String.isEmpty(inputAccount.Email__c)){
                inputAccount.Email__c = utilData.maskEmailId;
            }
            if(!String.isEmpty(inputAccount.Corporate_email__c)){
                inputAccount.Corporate_email__c = utilData.maskEmailId;
            }
            if(!String.isEmpty(inputAccount.Email_1__c)){
                inputAccount.Email_1__c = utilData.maskEmailId;
            }
            if(!String.isEmpty(inputAccount.Email_Address_2__c)){
                inputAccount.Email_Address_2__c = utilData.maskEmailId;
            }
            if(!String.isEmpty(inputAccount.E_Mail_Address_3__c)){
                inputAccount.E_Mail_Address_3__c = utilData.maskEmailId;
            }
            if(!String.isEmpty(inputAccount.Initial_Submitter__c)){
                inputAccount.Initial_Submitter__c = utilData.maskEmailId;
            }
            
            modifiedAccounts.add(inputAccount);
        }
        
        if(!modifiedAccounts.isEmpty()) update modifiedAccounts;//Database.update(modifiedAccounts,false);//update modifiedAccounts;
    }
    
    public static void maskCaseEmails(List<Case> inputCases,UtilityData utilData){
        List<Case> modifiedCases = new List<Case>();
        
        for(Case inputCase : inputCases){
            if(!String.isEmpty(inputCase.suppliedEmail)){
                inputCase.suppliedEmail = utilData.maskEmailId;
            }
            if(!String.isEmpty(inputCase.Claim_Submitter_Email__c)){
                inputCase.Claim_Submitter_Email__c = utilData.maskEmailId;
            }
            if(!String.isEmpty(inputCase.Email_UwForm__c)){
                inputCase.Email_UwForm__c = utilData.maskEmailId;
            }
            if(!String.isEmpty(inputCase.Email_address__c)){
                inputCase.Email_address__c = utilData.maskEmailId;
            }
            if(!String.isEmpty(inputCase.E_mail_address1__c)){
                inputCase.E_mail_address1__c = utilData.maskEmailId;
            }
            if(!String.isEmpty(inputCase.E_mail_address__c)){
                inputCase.E_mail_address__c = utilData.maskEmailId;
            }
            if(!String.isEmpty(inputCase.Email_address_MRF__c)){
                inputCase.Email_address_MRF__c = utilData.maskEmailId;
            }
            
            modifiedCases.add(inputCase);
        }
        
        if(!modifiedCases.isEmpty()) update modifiedCases;
    }
    
    public static void maskContactEmails(List<Contact> inputContacts,UtilityData utilData){
        List<Contact> modifiedContacts = new List<Contact>();
        for(Contact inputContact : inputContacts){
                        
            if(!String.isEmpty(inputContact.Email)){
                inputContact.Email = utilData.maskEmailId;
            }
            if(!String.isEmpty(inputContact.Email_1__c)){
                inputContact.Email_1__c = utilData.maskEmailId;
            }
            if(!String.isEmpty(inputContact.Email_2__c)){
                inputContact.Email_2__c = utilData.maskEmailId;
            }
            if(!String.isEmpty(inputContact.Email_3__c)){
                inputContact.Email_3__c = utilData.maskEmailId;
            }
            if(!String.isEmpty(inputContact.Email_4__c)){
                inputContact.Email_4__c = utilData.maskEmailId;
            }
            if(!String.isEmpty(inputContact.Email_5__c)){
                inputContact.Email_5__c = utilData.maskEmailId;
            }
            
            modifiedContacts.add(inputContact);
        }
        
        if(!modifiedContacts.isEmpty()) Database.update(modifiedContacts,false);//update modifiedContacts;
    }
    //Process-Helper Methods END
    
    //Creates and returns queryString/s for all jobTypes
    public static List<String> getQueryStrings(UtilityData utilData){
        String queryString;
        List<String> queryStrings = new List<String>();
        
        //if(utilData.targetSObjectApiName.equalsIgnoreCase('account') && (utilData.jobName.containsIgnoreCase('mask') && utilData.jobName.containsIgnoreCase('email'))){
        if(utilData.jobName.containsIgnoreCase('#account-emailMasking#')){
            queryString = 'SELECT'
                +' Id,Email__c,Corporate_email__c,Email_1__c,Email_Address_2__c,E_Mail_Address_3__c,Initial_Submitter__c'
                +' FROM Account'
                +' WHERE Email__c != NULL'
                +' OR Corporate_email__c != NULL'
                +' OR Email_1__c != NULL'
                +' OR Email_Address_2__c != NULL'
                +' OR E_Mail_Address_3__c != NULL'
                +' OR Initial_Submitter__c != NULL';
            queryStrings.add(queryString);
        }else if(utilData.jobName.containsIgnoreCase('#case-emailMasking#')){
            Schema.DescribeSObjectResult dSOR = Case.SObjectType.getDescribe();
            Id claimRecordTypeId = dSOR.getRecordTypeInfosByDeveloperName().get('Claim').getRecordTypeId();
            queryString = 'SELECT'
                +' Id,suppliedEmail,Claim_Submitter_Email__c,Email_UwForm__c,Email_address__c,E_mail_address1__c,E_mail_address__c,Email_address_MRF__c'
                +' FROM Case'
                +' WHERE RecordTypeId != \''+claimRecordTypeId+'\''
                +' AND (suppliedEmail != NULL'
                +' OR Claim_Submitter_Email__c != NULL'
                +' OR Email_UwForm__c != NULL'
                +' OR Email_address__c != NULL'
                +' OR E_mail_address1__c != NULL'
                +' OR E_mail_address__c != NULL'
                +' OR Email_address_MRF__c != NULL)';
            queryStrings.add(queryString);
        }else if(utilData.jobName.containsIgnoreCase('#contact-emailMasking#')){
            queryString = 'SELECT'
                +' Id, Email,Email_1__c,Email_2__c,Email_3__c,Email_4__c,Email_5__c'
                +' FROM Contact'
                +' WHERE Email != Null'
                +' OR Email_1__c != Null'
                +' OR Email_2__c != Null'
                +' OR Email_3__c != Null'
                +' OR Email_4__c != Null'
                +' OR Email_5__c != Null';
            queryStrings.add(queryString);
        }
        return queryStrings;
    }
    
    //Conversion-Helper methods START
    public static List<Account> sObjectsToAccounts(List<SObject> inputRecords){
        List<Account> retAccounts = new List<Account>();
        for(sObject inputRecord : inputRecords){
            retAccounts.add((Account) inputRecord);
        }
        return retAccounts;
    }
    public static List<Contact> sObjectsToContacts(List<SObject> inputRecords){
        List<Contact> retContacts = new List<Contact>();
        for(sObject inputRecord : inputRecords){
            retContacts.add((Contact) inputRecord);
        }
        return retContacts;
    }
    
    public static List<Case> sObjectsToCases(List<Case> inputRecords){
        List<Case> retCases = new List<Case>();
        for(sObject inputRecord : inputRecords){
            retCases.add((Case) inputRecord);
        }
        return retCases;
    }
    //Conversion-Helper methods START
}